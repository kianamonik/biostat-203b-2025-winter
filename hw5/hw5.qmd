---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 20 @ 11:59PM
author: "Kiana Mohammadinik and 205928003"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    pdf:
      number-sections: true
      toc: true
      toc-depth: 3
---

## Predicting ICU duration
```{r}
library(readr)
library(dplyr)
library(recipes)
library(tidymodels)
library(stacks)
library(finetune)  
library(doParallel)
library(dials) 
library(vip)
```

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.
```{r}
mimiciv_icu_cohort <- read_rds("/Users/kiananik/Desktop/BIOSTAT/BIOSTAT 203B/203B-hw/hw4/mimiciv_shiny/mimic_icu_cohort.rds")
mimiciv_icu_cohort <- mimiciv_icu_cohort |> 
  mutate(los_long = as.factor(los > 2))

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

# Selecting relevant features
mimiciv_icu_cohort <- mimiciv_icu_cohort |> 
  select(
    -subject_id, -hadm_id, -stay_id)
mimiciv_icu_cohort <- mimiciv_icu_cohort |> 
  select(
    los_long, 
    gender, age_at_intime, marital_status, race, first_careunit,
    non_invasive_blood_pressure_systolic, temperature_fahrenheit,
    respiratory_rate, 
    non_invasive_blood_pressure_diastolic, heart_rate,
    bicarbonate, chloride, creatinine, glucose, potassium, sodium,
    hematocrit, wbc
  ) 

# Converting categorical variables to factors
mimiciv_icu_cohort <- mimiciv_icu_cohort |> 
  mutate(across(c(gender, marital_status, race, first_careunit), as.factor))

# Ensure `los_long` has no missing values
mimiciv_icu_cohort <- mimiciv_icu_cohort |> drop_na(los_long)

# Identify columns with less than 1000 missing values
valid_columns <- mimiciv_icu_cohort |> 
  summarise(across(everything(), ~ sum(is.na(.)))) |> 
  pivot_longer(cols = everything(), names_to = "variable", values_to = "missing_count") |> 
  filter(missing_count < 1000) |> 
  pull(variable)

# Subset dataset to keep only valid columns
mimiciv_icu_cohort <- mimiciv_icu_cohort |> select(all_of(valid_columns))

# Handling missing values
preprocess_recipe <- recipe(los_long ~ ., data = mimiciv_icu_cohort) |>
  step_impute_median(all_numeric_predictors()) |> 
  step_impute_mode(all_nominal_predictors()) |>   
  step_normalize(all_numeric_predictors()) |>   
  step_dummy(all_nominal_predictors(), -all_outcomes())

# Preparing the processed dataset
prepped_data <- preprocess_recipe |> prep() |> juice()

glimpse(prepped_data)
```


2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r}
set.seed(203)

data_split <- initial_split(
  prepped_data, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

train_data <- training(data_split)
test_data  <- testing(data_split)

# Check class distribution
train_data |> count(los_long)
test_data  |> count(los_long)
```

3. Train and tune the models using the training set.
```{r}
# Setup Parallel Processing 
cl <- makeCluster(detectCores())
registerDoParallel(cl)

# Logistic Regression with Elastic Net Regularization
log_spec <- logistic_reg(
  penalty = tune(),
  mixture = tune()
) %>%
  set_engine("glmnet") %>%
  set_mode("classification")

log_wf <- workflow() %>%
  add_model(log_spec) %>%
  add_formula(los_long ~ .)  

# Random Forest Model
rf_spec <- rand_forest(
  mtry = tune(),
  min_n = tune(),
  trees = 250
) %>%
  set_engine("ranger") %>%
  set_mode("classification")

rf_wf <- workflow() %>%
  add_model(rf_spec) %>%
  add_formula(los_long ~ .)  

# Boosted Trees (XGBoost)
xgb_spec <- boost_tree(
  trees = tune(),
  tree_depth = tune(),
  learn_rate = tune(),
  loss_reduction = tune(),
  sample_size = tune(),
  min_n = tune()
) %>%
  set_engine("xgboost") %>%
  set_mode("classification")

xgb_wf <- workflow() %>%
  add_model(xgb_spec) %>%
  add_formula(los_long ~ .) 

# Cross-validation Setup 
set.seed(203)
folds <- vfold_cv(train_data, v = 3, strata = los_long)  

# Tuning Grids 

# Logistic Regression Grid (Regular Grid Search)
log_grid <- grid_regular(
  penalty(range = c(0.0001, 1)),
  mixture(range = c(0, 1)),
  levels = 3 
)

# Finalize mtry based on training data for Random Forest
final_mtry <- finalize(mtry(), train_data)

rf_grid <- grid_random(
  finalize(parameters(rf_spec), train_data),
  size = 5  
)

# XGBoost Grid with reduced size
xgb_grid <- grid_random(
  extract_parameter_set_dials(xgb_spec),
  size = 10  
)

# Verbose to see progress
ctrl <- control_grid(verbose = TRUE)

# Tuning Each Model 
set.seed(203)
log_res <- tune_grid(
  log_wf,
  resamples = folds,
  grid = log_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = ctrl
)

set.seed(203)
rf_res <- tune_grid(
  rf_wf,
  resamples = folds,
  grid = rf_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = ctrl
)

set.seed(203)
xgb_res <- tune_grid(
  xgb_wf,
  resamples = folds,
  grid = xgb_grid,
  metrics = metric_set(roc_auc, accuracy),
  control = ctrl
)

# Stop Parallel Cluster
stopCluster(cl)
```


4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
