---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: "Kiana Mohammadinik and 205928003"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
  pdf:
    number-sections: true
    toc: true
    toc-depth: 3
---
Display machine information for reproducibility:

```{r, eval=FALSE}
sessionInfo()
```

Load necessary libraries (you can add more as needed).

```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(readr)
library(dplyr)
```

Display memory information of your computer

```{r, eval=FALSE}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.)

**Solution:**

```{r}
# Base R: read.csv
system.time(adm_base <- read.csv("~/mimic/hosp/admissions.csv.gz"))

pryr::object_size(adm_base)
str(adm_base)  
```

Time: 2.469 seconds\
Memory Usage: 200.1 MB\
Default Parsed Data Type: `read.csv` defaults to character vectors for text columns and uses heuristics to guess numeric and integer types.

```{r}
# Tidyverse: read_csv
system.time(adm_tidy <- readr::read_csv("~/mimic/hosp/admissions.csv.gz"))

pryr::object_size(adm_tidy)

str(adm_tidy)  
```

Time: 0.672 seconds\
Memory Usage: 70.02 MB\
Default Parsed Data Type: `read_csv` outputs a tibble, which does not automatically convert character columns to factors.

```{r}
# data.table: fread
system.time(adm_dt <- data.table::fread("~/mimic/hosp/admissions.csv.gz"))

pryr::object_size(adm_dt)

str(adm_dt)  
```

Time: 0.541 seconds\
Memory Usage: 63.47 MB\
Default Parsed Data Type: similar to `read_csv`, `fread` also has effecient auto-detection.

**Conclusion:** `fread` is the fastest and most memory-efficient. `fread` and `read_csv` are better at detecting data types automatically than `read.csv`.

### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

```{r}
# Define column types
col_types_spec <- cols(
  subject_id = col_double(),
  hadm_id = col_double(),
  admittime = col_datetime(format = ""),
  dischtime = col_datetime(format = ""),
  deathtime = col_datetime(format = ""),
  admission_type = col_character(),
  admit_provider_id = col_character(),
  admission_location = col_character(),
  discharge_location = col_character(),
  insurance = col_character(),
  language = col_character(),
  marital_status = col_character(),
  race = col_character(),
  edregtime = col_datetime(format = ""),
  edouttime = col_datetime(format = ""),
  hospital_expire_flag = col_double()
)

# Read with specified column types
system.time(adm_tidy2 <- readr::read_csv("~/mimic/hosp/admissions.csv.gz",
                                         col_types = col_types_spec))

pryr::object_size(adm_tidy2)

str(adm_tidy2)
```

The run time decreases by 0.068 seconds and the memory usage remains unchanged.

## Q2. Ingest big data files

<p align="center">

<img src="./bigfile.png" width="50%"/>

</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 130x bigger than `admissions.csv.gz`.

```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```

Display the first 10 lines of this file.

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">

<img src="./readr_logo.png" width="20%"/>

</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings.

**Solution:**

```{r, eval=FALSE} 
#| eval: false
system.time(lab_data <- read_csv("~/mimic/hosp/labevents.csv.gz"))

pryr::object_size(lab_data)

str(lab_data)
```
Attempting to ingest labevents.csv.gz using read_csv() multiple times resulted in a vector memory exhausted (limit reached) error. Despite having 16GB of RAM, R was unable to allocate enough memory to load the full dataset. More memory-efficient alternatives like fread() (data.table) or chunked reading are may be more appropriate in this context.


### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`. Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

**Solution:**
```{r}
system.time(
  lab_data <- read_csv("~/mimic/hosp/labevents.csv.gz", 
                       col_select = c("subject_id", "itemid", "charttime",
                                      "valuenum"))
)

pryr::object_size(lab_data)

str(lab_data)
```
The dataset was successfully ingested after selecting only the four columns (subject_id, itemid, charttime, valuenum). The ingestion process took ~3.3 minutes (197.6 seconds) to complete and the total memory usage of the resulting dataset is ~5.07 GB. The reduced column selection helped avoid memory exhaustion encountered in Q2.1 which confirms that limiting column selection significantly reduces memory usage, making it feasible to load large datasets.



### Q2.3 Ingest a subset of `labevents.csv.gz`

<p align="center">

<img src="./linux_logo.png" width="20%"/>

</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data. Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `g#zip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

**Solution:** 

```{bash}
##| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz | 
awk -F',' '
NR==1 {print "subject_id,itemid,charttime,valuenum"; next} 
$5 == 50912 || $5 == 50971 || $5 == 50983 || $5 == 50902 || $5 == 50882 || 
$5 == 51221 || $5 == 51301 || $5 == 50931 {print $2","$5","$7","$10}' | gzip >
labevents_filtered.csv.gz

```

```{bash}
gzcat labevents_filtered.csv.gz | head -1 | awk -F',' '{print NF}'
```

```{bash}
gzcat labevents_filtered.csv.gz | tail -n +2 | wc -l
```

```{bash}
ls -lh labevents_filtered.csv.gz
```


#Displaying the first 10 lines
```{r}
system.time(
  lab_data <- read_csv("labevents_filtered.csv.gz")
)

lab_data_sorted <- lab_data %>%
  arrange(subject_id, charttime, itemid)

head(lab_data_sorted, 10)

pryr::object_size(lab_data_sorted)
str(lab_data_sorted)
```
It took 5.094 seconds for `read_csv` to ingest `labevents_filtered.csv.gz`.

The number of rows (excluding the header) is
```{bash}
gzcat labevents_filtered.csv.gz | tail -n +2 | wc -l
```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">

<img src="./arrow_logo.png" width="30%"/>

</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator.

**Solution:** 
```{bash}
gzcat labevents_filtered.csv.gz | tail -n +2 | wc -l
```

```{bash}
#| eval: false
gunzip -c labevents_filtered.csv.gz > labevents_filtered.csv
```

```{bash}
ls -lh labevents_filtered.csv
```



```{r, eval=FALSE}
dataset <- open_dataset("labevents_filtered.csv", format = "csv")

filtered_data_arrow <- dataset %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  arrange(subject_id, charttime, itemid) %>%
  collect()

start_time <- Sys.time()
end_time <- Sys.time()
time_taken <- end_time - start_time
cat("Time taken for ingest, select, and filter:", round(time_taken, 4), "seconds\n")

cat("Number of rows in the result:", nrow(filtered_data_arrow), "\n")
print(head(filtered_data_arrow, 10))

```
Apache Arrow is an organized digital library for data. Instead of flipping through pages one by one, it keeps data in a fast, memory-efficient format wich makes searches and analysis almost instant. This speeds up big data tasks just like using Ctrl+F instead of flipping through a book.


### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">

<img src="./parquet_logo.png" width="30%"/>

</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**Solution:**
```{r}
csv_file <- "labevents_filtered.csv"
parquet_folder <- "labevents_pq"

start_time <- Sys.time()
dataset <- read_csv(csv_file, col_types = cols())

write_dataset(dataset, path = parquet_folder, format = "parquet")

end_time <- Sys.time()

file_size_bytes <- file.info("labevents_pq/part-0.parquet")$size
file_size_gb <- file_size_bytes / (1024^3)

file_size_bytes
file_size_gb

open_dataset(parquet_folder) %>% collect() %>% nrow()

open_dataset(parquet_folder) %>% collect() %>% ncol()
```

```{bash}
ls -lh labevents_pq/part-0.parquet
du -sh labevents_pq
```


Parquet is functions  as a zip file for data tables becuase it stores large datasets in a compressed, column-based format, making it much faster to read, filter, and analyze compared to traditional CSVs. It’s great for big data because it saves space and speeds up processing.

### Q2.6 DuckDB

<p align="center">

<img src="./duckdb_logo.png" width="20%"/>

</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.
```{r}
start_time <- Sys.time()
parquet_dataset <- open_dataset("labevents.parquet")
con <- dbConnect(duckdb::duckdb(), dbdir = ":memory:")
duckdb_table <- to_duckdb(parquet_dataset, con = con, table_name = "labevents")
filtered_data_duckdb <- duckdb_table %>%
  select(subject_id, itemid, charttime, valuenum) %>%
  filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) 
%>%
  arrange(subject_id, charttime, itemid) %>%
  collect()
end_time <- Sys.time()
time_taken <- round(difftime(end_time, start_time, units = "secs"), 4)
cat("Time taken for ingest + convert + select + filter:", time_taken,
    "seconds\n")
cat("Number of rows in result:", nrow(filtered_data_duckdb), "\n")
print(head(filtered_data_duckdb, 10)) 
```


## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```

How many rows? 433 millions.

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```

[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```

In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2.

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

**Solution:**

```{r}
file_path <- "~/mimic/icu/chartevents.csv.gz"

# Read the file efficiently with Arrow
dataset <- open_dataset(file_path, format = "csv")

# Filter only the relevant `itemid` values
filtered_data <- dataset %>%
  select(subject_id, stay_id, itemid, charttime, storetime, valuenum) %>%
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) %>%
  arrange(subject_id, charttime, itemid) %>%
  collect()  

write_parquet(filtered_data, "chartevents_filtered.parquet")

cat("Number of rows in filtered dataset:", nrow(filtered_data), "\n")

# Display first 10 rows
print(head(filtered_data, 10))
```



